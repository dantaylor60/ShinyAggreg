X <- model.matrix(terms(form),xdata)
inSample <- sample(1:nrow(Y),round(0.8*nrow(Y)))
outSample <- which(!((1:nrow(Y))%in%inSample ))
#pdf(file=paste0("../../Figures/DensityJura.pdf"),height=4,width=9)
par(mfrow=c(2,3))
lapply(1:ncol(Y),function(cc){
#hist(Y[,cc],xlab="y values",)
plot(density(Y[,cc],from=0,to=1),main=bquote(Y[.(cc)]),xlab="y value")
})
#dev.off()
S = ncol(Y)-1
nsim=5000
#----- normal model
test.N = sample.Comp(Y=Y[inSample,],X=X[inSample,],
#form=as.formula(paste0("~ 1 +",paste0(colnames(X),collapse="+"))),
obsout=NULL,typecomp="Prop",
typelat = "normal",rho.psi=0.1,epsi=0.05,
Ginv=NULL,df.chi=6,nsim=nsim,burnin=round(0.1*nsim),
thinning=2)
source("PredictionCodeStckBreak.R")
Y.pred.list = ObtainPreds(X=X[outSample,],output=test.N,typelatent="normal",
n=length(outSample),S=S,p=ncol(X))
stats.Y.pred <- GetSummaryPreds(predlist=Y.pred.list)
par(mfrow=c(1,1))
#pdf("../../Figures/JuraPredNormal.pdf",width=8,height=7)
plot(x=c(Y[outSample,]),y=c(stats.Y.pred$Median),xlim=c(0,1),ylim=c(0,1),xlab="observed values",ylab="predicted values",
col=rep(c(1:(ncol(Y))),each=nrow(Y[outSample,])),pch=20,cex.axis=1.5,cex.lab=1.5)
abline(a=0,b=1,lwd=2)
legend("topleft",legend=paste0("Y",1:(ncol(Y)-1)),col=1:(ncol(Y)-1),
pch=c(20,20),ncol=4,cex=1.5)
par(mfrow=c(1,1))
#pdf("../../Figures/JuraPredNormal.pdf",width=8,height=7)
plot(x=c(Y[outSample,]),y=c(stats.Y.pred$Median),xlim=c(0,1),ylim=c(0,1),xlab="observed values",ylab="predicted values",
col=rep(c(1:(ncol(Y))),each=nrow(Y[outSample,])),pch=20,cex.axis=1.5,cex.lab=1.5)
abline(a=0,b=1,lwd=2)
legend("topleft",legend=paste0("Y",1:(ncol(Y)-1)),col=1:(ncol(Y)-1),
pch=c(20,20),ncol=4,cex=1.5)
PredSummary <- data.frame(method=rep("normal",each=(S+1)*length(outSample)),
comp = rep(rep(paste0("Y",1:(S+1)),each=length(outSample)),1),
obsY = round(rep(c(Y[outSample,]),1),4),
medY=round(c(stats.Y.pred$Median),4),
meanY=round(c(stats.Y.pred$Mean),4),
LL=round(c(t(stats.Y.pred$Lo)),4),
UL=round(c(t(stats.Y.pred$Hi)),4))
sizeval=1.5
require(ggplot2)
ggplot(PredSummary,aes(x=obsY,y=medY)) + theme_bw() + ylim(0, 1)+#coord_fixed() +
facet_grid(comp~method) +
geom_ribbon(data=PredSummary,aes(y=medY,ymin=LL, ymax=UL,fill=comp), alpha=0.2) +
geom_point(aes(color=comp),size=sizeval) +
theme(legend.position="none")  +
scale_color_manual(values=1:6)+
geom_abline(mapping=aes(slope=1,intercept=0))+
xlab("observed responses") + ylab("posterior predicted median") +
theme(strip.background = element_blank(),strip.text.x = element_text(size=12,color="black"),
strip.text.y = element_text(size=10,color="black"))
727/12
636/12
636/6
597/12
library("gjam", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
80*35
80*20
9185-1791-846
9185-1791-846-406
334900*.95
9185-1791
9185-1179-846
9185-1179-846-1200-406
(9185-1179-846-1200-406)+334900*0.05
(9185-1179-846-1200-406)+334900*0.03
(9185-1179-846-1200-406)+334900*0.03 - 3000 - 15000 - 6150
(9185-1179-846-1200-406)+334900*0.05 - 3000 - 15000 - 6150
9185-1179-846
9185-1179-846-650-400
9185-1179-846-400
(9185-1179-846-1200-406)+334900*0.05 - 3000 - 15000 - 6250
334900*0.0375/12
(334900*0.0375/12)*25/30
(334900*0.0375/12)*25/31
(334900*0.95*0.0375/12)*25/30
(334900*0.97*0.0375/12)*25/30
(9185-1179-1200-406)+334900*0.05 - 3000 - 15000 - 6250
334900*0.95
detach("package:gjam", unload=TRUE)
remove.packages("gjam")
setwd("~/Dropbox/Research/Duke2015/GJAM_DimRed/GJAM_Selection/Code")
setwd("~/Dropbox/Research/Duke2015/GJAM_DimRed/GJAM_Selection/Code")
path <- 'GJAMfunctions2'
lf <- list.files(path=path)
for(j in 1:length(lf)){
gcc <- grep('cpp',lf[j])
if(length(gcc) == 1){
Rcpp::sourceCpp(paste(path,lf[j],sep='/'))
next
}
gcc <- grep('RData',lf[j])
if(length(gcc) == 1){
load(paste(path,lf[j],sep='/'))
next
}
source( paste(path,lf[j],sep='/') )
}
x <- matrix(rnorm(10000),ncol=10)
x[,1] <- 1
B <- matrix(rnorm(5*10,0,0.3),ncol=10,nrow=5)
ZeroBs <- matrix(rbinom(prod(dim(B)),1,0.3),ncol=ncol(B),nrow=nrow(B))
require(mvtnorm)
Y <- x%*%t(B*ZeroBs) + rmvnorm(1000,mean=rep(0,5),sigma=cov2cor(solve(crossprod(matrix(rnorm(50),ncol=5 ) ) ) ))
Y <- x%*%t(B*ZeroBs) + rmvnorm(1000,mean=rep(0,S),sigma=cov2cor(solve(crossprod(matrix(rnorm(S*2),ncol=S ) ) ) ))
n=1000
S=30
N=20
r=3
p=10
x <- matrix(rnorm(10000),ncol=p)
x[,1] <- 1
B <- matrix(rnorm(5*10,0,0.3),ncol=p,nrow=S)
ZeroBs <- matrix(rbinom(prod(dim(B)),1,0.3),ncol=ncol(B),nrow=nrow(B))
require(mvtnorm)
Y <- x%*%t(B*ZeroBs) + rmvnorm(1000,mean=rep(0,S),sigma=cov2cor(solve(crossprod(matrix(rnorm(S*2),ncol=S ) ) ) ))
Y <- x%*%t(B*ZeroBs) + rmvnorm(1000,mean=rep(0,S),sigma=cov2cor(solve(crossprod(matrix(rnorm(S*2*S),ncol=S ) ) ) ))
Y
ml <- list(ng = 3000, burnin = 1000, typeNames = 'CON')
out <- gjamGibbs(xdata=x, ydata=Y, modelList = ml)
head(X)
head(x)
paste0("x",1:(ncol(x)-1))
colnames(x) <- c("int",paste0("x",1:(ncol(x)-1)))
0.05*334900
ff <- formula(paste0("~",paste0("x",1:(ncol(x)-1))))
ff
ff <- formula(paste0("~",paste0("x",1:(ncol(x)-1),collapse="+")))
ff
ff <- formula(paste0("~",paste0("x",1:(ncol(x)-1),collapse="+")))
ml <- list(ng = 3000, burnin = 1000, typeNames = 'CON')
out <- gjamGibbs(form=ff,xdata=x, ydata=Y, modelList = ml)
x <- as.data.frame(x)
head(x)
Y <- as.data.frame(Y)
ml <- list(ng = 3000, burnin = 1000, typeNames = 'CON')
out <- gjamGibbs(form=ff,xdata=x, ydata=Y, modelList = ml)
334900*0.05
334900*0.95
#closing costs
9185
#Title premium adjustment
1179.39
#Closing costs
9185-1179.39
#Closing costs - interest prepaid
9185-1179.39-846
#Closing costs - interest prepaid - points
9185-1179.39-846-406
#Closing costs - Title Adjustment - interest prepaid - points
9185-1179.39-846-406
require(shiny)
runGitHub( "ShinyAggreg", "dantaylor60")
setwd("~/Dropbox/Research/Duke2015/RolandData/GJAM_Analysis")
load("ProcessedDataLight.RData")
dataLight$IndWknd <- factor(dataLight$day%in%c("Sat","Sun"),
levels=c(TRUE,FALSE),labels=c("weekend","weekday"))
colsResp <- c("Human","Dog","Horse","Coyote","BlackBear",
"WT.Deer","N.Racoon","E.GraySquirr","Virg.Opossum")
colsPred <- c("lat", "long", "Year", "WeekDay", "day","IndWknd","SurveyDay",
"Dist_250m", "Ag_250m", "LC_250m", "Edge_250m", "HDens_250m", "Cam_distance",
"Moon", "NDVI","Temp", "Hunting","Nearest_neighbor")
#--------------------------------------------
#remove NA's (comment if NA's are to be kept)
#--------------------------------------------
indNA <- apply(dataLight,1,function(rr)(sum(is.na(rr))>0))
dataLight <- dataLight[!indNA,]
#--------------------------------------------
#--------------------------------------------
#by light-dark * by date * by camera
#--------------------------------------------
dataLight$Year <-  as.factor(unlist(lapply(dataLight$dateChar,function(yr)strsplit(yr,split="/",fixed=T)[[1]][1])))
dataLight$light <- as.factor(dataLight$light)
ydata <- dataLight[,colsResp]
xdata <- dataLight[,c("light",colsPred)]
S <- ncol(ydata)
n <- nrow(ydata)
#Body weight measurements from:
#Smith, F.A., S.K. Lyons, S.K.M. Ernest, K.E. Jones, D.M. Kaufman,
#T. Dayan, P.A. Marquet, J.H. Brown and J.P. Haskell. 2003.
#Body mass of late Quaternary mammals. Ecology 84:3402 (updated version
#obtained from senior author)
#set body mass per species and get area captured by camera
BW <- c("Human"=81930,"Dog"=16800,"Horse"=250000,
"Coyote"=13406.333,"BlackBear"=99949.356,
"WT.Deer"=55508.57,"N.Racoon"=5525,
"E.GraySquirr"=506.5,"Virg.Opossum"=2195.5)/1000
Area <- 1.65*BW^0.33
#if removing NA's
#weight the area by the maximium detection distance for a human at each camera
effMat <- matrix(dataLight$Det_dist/
max(dataLight$Det_dist,
na.rm=T),ncol=1)%*%matrix(Area,nrow=1)     # effort is a matrix
#else if NA's are kept, just use Area (no weighting) -- uncomment below
#effMat <- matrix(BW,nrow=n,ncol=S,byrow=T)     # effort is a matrix
library(gjam)
ef  <- list( columns = 1:S, values = effMat)
formLight <- as.formula(~lat+long+light*Moon+
Year+WeekDay+IndWknd+Temp)
#AS DISCRETE ABUNDANCE DATA
ml  <- list(ng = 1000, burnin = 100, typeNames = rep("DA",S), effort = ef,)
out.DA.Light <- gjamGibbs(formLight, xdata=xdata,
ydata=ydata, modelList = ml)
save(list="out.DA.Light",file="gjamLightNoNAs.RData")
install.packages("~/Dropbox/gjamDevelopment/gjam_2.0.tar.gz", repos = NULL, type = "source")
setwd("~/Dropbox/Research/Duke2015/RolandData/GJAM_Analysis")
load("ProcessedDataLight.RData")
dataLight$IndWknd <- factor(dataLight$day%in%c("Sat","Sun"),
levels=c(TRUE,FALSE),labels=c("weekend","weekday"))
colsResp <- c("Human","Dog","Horse","Coyote","BlackBear",
"WT.Deer","N.Racoon","E.GraySquirr","Virg.Opossum")
colsPred <- c("lat", "long", "Year", "WeekDay", "day","IndWknd","SurveyDay",
"Dist_250m", "Ag_250m", "LC_250m", "Edge_250m", "HDens_250m", "Cam_distance",
"Moon", "NDVI","Temp", "Hunting","Nearest_neighbor")
#--------------------------------------------
#remove NA's (comment if NA's are to be kept)
#--------------------------------------------
indNA <- apply(dataLight,1,function(rr)(sum(is.na(rr))>0))
dataLight <- dataLight[!indNA,]
#--------------------------------------------
#--------------------------------------------
#by light-dark * by date * by camera
#--------------------------------------------
dataLight$Year <-  as.factor(unlist(lapply(dataLight$dateChar,function(yr)strsplit(yr,split="/",fixed=T)[[1]][1])))
dataLight$light <- as.factor(dataLight$light)
ydata <- dataLight[,colsResp]
xdata <- dataLight[,c("light",colsPred)]
S <- ncol(ydata)
n <- nrow(ydata)
#Body weight measurements from:
#Smith, F.A., S.K. Lyons, S.K.M. Ernest, K.E. Jones, D.M. Kaufman,
#T. Dayan, P.A. Marquet, J.H. Brown and J.P. Haskell. 2003.
#Body mass of late Quaternary mammals. Ecology 84:3402 (updated version
#obtained from senior author)
#set body mass per species and get area captured by camera
BW <- c("Human"=81930,"Dog"=16800,"Horse"=250000,
"Coyote"=13406.333,"BlackBear"=99949.356,
"WT.Deer"=55508.57,"N.Racoon"=5525,
"E.GraySquirr"=506.5,"Virg.Opossum"=2195.5)/1000
Area <- 1.65*BW^0.33
#if removing NA's
#weight the area by the maximium detection distance for a human at each camera
effMat <- matrix(dataLight$Det_dist/
max(dataLight$Det_dist,
na.rm=T),ncol=1)%*%matrix(Area,nrow=1)     # effort is a matrix
#else if NA's are kept, just use Area (no weighting) -- uncomment below
#effMat <- matrix(BW,nrow=n,ncol=S,byrow=T)     # effort is a matrix
library(gjam)
ef  <- list( columns = 1:S, values = effMat)
formLight <- as.formula(~lat+long+light*Moon+
Year+WeekDay+IndWknd+Temp)
#AS DISCRETE ABUNDANCE DATA
ml  <- list(ng = 1000, burnin = 100, typeNames = rep("DA",S), effort = ef,)
out.DA.Light <- gjamGibbs(formLight, xdata=xdata,
ydata=ydata, modelList = ml)
save(list="out.DA.Light",file="gjamLightNoNAs.RData")
ml  <- list(ng = 1000, burnin = 100, typeNames = rep("DA",S), effort = ef)
setwd("~/Dropbox/Research/Duke2015/RolandData/GJAM_Analysis")
load("ProcessedDataLight.RData")
dataLight$IndWknd <- factor(dataLight$day%in%c("Sat","Sun"),
levels=c(TRUE,FALSE),labels=c("weekend","weekday"))
colsResp <- c("Human","Dog","Horse","Coyote","BlackBear",
"WT.Deer","N.Racoon","E.GraySquirr","Virg.Opossum")
colsPred <- c("lat", "long", "Year", "WeekDay", "day","IndWknd","SurveyDay",
"Dist_250m", "Ag_250m", "LC_250m", "Edge_250m", "HDens_250m", "Cam_distance",
"Moon", "NDVI","Temp", "Hunting","Nearest_neighbor")
#--------------------------------------------
#remove NA's (comment if NA's are to be kept)
#--------------------------------------------
indNA <- apply(dataLight,1,function(rr)(sum(is.na(rr))>0))
dataLight <- dataLight[!indNA,]
#--------------------------------------------
#--------------------------------------------
#by light-dark * by date * by camera
#--------------------------------------------
dataLight$Year <-  as.factor(unlist(lapply(dataLight$dateChar,function(yr)strsplit(yr,split="/",fixed=T)[[1]][1])))
dataLight$light <- as.factor(dataLight$light)
ydata <- dataLight[,colsResp]
xdata <- dataLight[,c("light",colsPred)]
S <- ncol(ydata)
n <- nrow(ydata)
#Body weight measurements from:
#Smith, F.A., S.K. Lyons, S.K.M. Ernest, K.E. Jones, D.M. Kaufman,
#T. Dayan, P.A. Marquet, J.H. Brown and J.P. Haskell. 2003.
#Body mass of late Quaternary mammals. Ecology 84:3402 (updated version
#obtained from senior author)
#set body mass per species and get area captured by camera
BW <- c("Human"=81930,"Dog"=16800,"Horse"=250000,
"Coyote"=13406.333,"BlackBear"=99949.356,
"WT.Deer"=55508.57,"N.Racoon"=5525,
"E.GraySquirr"=506.5,"Virg.Opossum"=2195.5)/1000
Area <- 1.65*BW^0.33
#if removing NA's
#weight the area by the maximium detection distance for a human at each camera
effMat <- matrix(dataLight$Det_dist/
max(dataLight$Det_dist,
na.rm=T),ncol=1)%*%matrix(Area,nrow=1)     # effort is a matrix
#else if NA's are kept, just use Area (no weighting) -- uncomment below
#effMat <- matrix(BW,nrow=n,ncol=S,byrow=T)     # effort is a matrix
library(gjam)
ef  <- list( columns = 1:S, values = effMat)
formLight <- as.formula(~lat+long+light*Moon+
Year+WeekDay+IndWknd+Temp)
#AS DISCRETE ABUNDANCE DATA
ml  <- list(ng = 1000, burnin = 100, typeNames = rep("DA",S), effort = ef)
out.DA.Light <- gjamGibbs(formLight, xdata=xdata,
ydata=ydata, modelList = ml)
save(list="out.DA.Light",file="gjamLightNoNAs.RData")
pl.DA.Light  <- list(SMALLPLOTS=F, outfolder = "DA_results_Light",
GRIDPLOTS=T,SAVEPLOTS = T, sigOnly=F)
gjamPlot(output = out.DA.Light, plotPars = pl.DA.Light)
save.image(file="imageLightNoNAs.RData")
rm(list=ls())
gc()
#--------------------------------------------
#by date * by camera
#--------------------------------------------
load("ProcessedDataDate.RData")
dataDate$IndWknd <- factor(dataDate$day%in%c("Sat","Sun"),
levels=c(TRUE,FALSE),labels=c("weekend","weekday"))
colsResp <- c("Human","Dog","Horse","Coyote","BlackBear",
"WT.Deer","N.Racoon","E.GraySquirr","Virg.Opossum")
colsPred <- c("lat", "long", "Year", "WeekDay", "day","IndWknd","SurveyDay",
"Dist_250m", "Ag_250m", "LC_250m", "Edge_250m", "HDens_250m", "Cam_distance",
"Moon", "NDVI","Temp", "Hunting","Nearest_neighbor")
#--------------------------------------------
#remove NA's
indNA <- apply(dataDate,1,function(rr)(sum(is.na(rr))>0))
#--------------------------------------------
dataDate <- dataDate[!indNA,]
#--------------------------------------------
dataDate$IndWknd <- factor(dataDate$day%in%c("Sat","Sun"),
levels=c(TRUE,FALSE),labels=c("weekend","week"))
dataDate$Year <- as.factor(unlist(lapply(dataDate$dateChar,function(yr)strsplit(yr,split="/",fixed=T)[[1]][1])))
dataDate$day <- as.factor(as.numeric(dataDate$day))
ydata <- dataDate[,colsResp]
xdata <- dataDate[,c(colsPred)]
S <- ncol(ydata)
n <- nrow(ydata)
#Body weight measurements from:
#Smith, F.A., S.K. Lyons, S.K.M. Ernest, K.E. Jones, D.M. Kaufman,
#T. Dayan, P.A. Marquet, J.H. Brown and J.P. Haskell. 2003.
#Body mass of late Quaternary mammals. Ecology 84:3402 (updated version
#obtained from senior author)
#set body mass per species and get area captured by camera
BW <- c("Human"=81930,"Dog"=16800,"Horse"=250000,
"Coyote"=13406.333,"BlackBear"=99949.356,
"WT.Deer"=55508.57,"N.Racoon"=5525,
"E.GraySquirr"=506.5,"Virg.Opossum"=2195.5)/1000
Area <- 1.65*BW^0.33
#if removing NA's
#weight the area by the maximium detection distance for a human at each camera
effMat <- matrix(dataDate$Det_dist/
max(dataDate$Det_dist,
na.rm=T),ncol=1)%*%matrix(Area,nrow=1)     # effort is a matrix
library(gjam)
ef  <- list( columns = 1:S, values = effMat)
formDate <- as.formula(~lat+long+Moon+Year+WeekDay+IndWknd+Temp)
#AS DISCRETE ABUNDANCE DATA
ml  <- list(ng = 1000, burnin = 100, typeNames = rep("DA",S), effort = ef)
out.DA.Date <- gjamGibbs(formDate, xdata=xdata,
ydata=ydata, modelList = ml)
save(list="out.DA.Date",file="gjamDateNoNAs.RData")
pl.DA.Date  <- list(SMALLPLOTS=F, outfolder = "DA_results_Date",
GRIDPLOTS=T,SAVEPLOTS = T, sigOnly=F)
gjamPlot(output = out.DA.Date, plotPars = pl.DA.Date)
save.image(file="imageDateNoNAs.RData")
1800*6
298.48*12
require(shiny)
runGitHub( "ShinyAggreg", "dantaylor60")
require(shiny)
runGitHub( "ShinyAggreg", "dantaylor60")
ui <- shinyUI(fluidPage(
headerPanel('NEON data aggregation by species'),
sidebarPanel(
helpText("Select the taxa that you want to extract data for"),
selectInput('group','data type',c('smallMammal','carabid','plantPresenceCover')),
helpText("Select the desired spatial aggregation scale"),
selectInput('space.Agg','spatial scale',c('byDomain','bySite','byPlot')),
helpText("Select the desired temporal aggregation scale"),
selectInput('time.Agg','temporal scale',c("aggAll",'byYear','byMonthYear','byBout')),
helpText("If data type = 'plantPresenceCover' choose the scale at which the data was collected"),
selectInput('typeFiles','file type for plant presence',c("none",'1m2Data','10m2Data','100m2Data','400m2Data')),
numericInput('numcols', label = "number of columns to display",value=4),
h3("Download data"),
downloadButton('downloadData', 'Download')
),
mainPanel(
tabsetPanel(
tabPanel('preview data',
dataTableOutput("aggData")),
tabPanel('summary',
dataTableOutput("summary"))
)
)
))
source("server.R")
shinyApp(ui = ui, server = serverAgg)
require(shiny)
ui <- shinyUI(fluidPage(
headerPanel('NEON data aggregation by species'),
sidebarPanel(
helpText("Select the taxa that you want to extract data for"),
selectInput('group','data type',c('smallMammal','carabid','plantPresenceCover')),
helpText("Select the desired spatial aggregation scale"),
selectInput('space.Agg','spatial scale',c('byDomain','bySite','byPlot')),
helpText("Select the desired temporal aggregation scale"),
selectInput('time.Agg','temporal scale',c("aggAll",'byYear','byMonthYear','byBout')),
helpText("If data type = 'plantPresenceCover' choose the scale at which the data was collected"),
selectInput('typeFiles','file type for plant presence',c("none",'1m2Data','10m2Data','100m2Data','400m2Data')),
numericInput('numcols', label = "number of columns to display",value=4),
h3("Download data"),
downloadButton('downloadData', 'Download')
),
mainPanel(
tabsetPanel(
tabPanel('preview data',
dataTableOutput("aggData")),
tabPanel('summary',
dataTableOutput("summary"))
)
)
))
source("server.R")
shinyApp(ui = ui, server = serverAgg)
setwd("~/Dropbox/Research/Duke2015/NEON/DataManipulation/ShinyAggreg")
ui <- shinyUI(fluidPage(
headerPanel('NEON data aggregation by species'),
sidebarPanel(
helpText("Select the taxa that you want to extract data for"),
selectInput('group','data type',c('smallMammal','carabid','plantPresenceCover')),
helpText("Select the desired spatial aggregation scale"),
selectInput('space.Agg','spatial scale',c('byDomain','bySite','byPlot')),
helpText("Select the desired temporal aggregation scale"),
selectInput('time.Agg','temporal scale',c("aggAll",'byYear','byMonthYear','byBout')),
helpText("If data type = 'plantPresenceCover' choose the scale at which the data was collected"),
selectInput('typeFiles','file type for plant presence',c("none",'1m2Data','10m2Data','100m2Data','400m2Data')),
numericInput('numcols', label = "number of columns to display",value=4),
h3("Download data"),
downloadButton('downloadData', 'Download')
),
mainPanel(
tabsetPanel(
tabPanel('preview data',
dataTableOutput("aggData")),
tabPanel('summary',
dataTableOutput("summary"))
)
)
))
source("server.R")
shinyApp(ui = ui, server = serverAgg)
setwd("~/Dropbox/Research/Duke2015/NEON/DataManipulation/ShinyAggreg")
require(shiny)
ui <- shinyUI(fluidPage(
headerPanel('NEON data aggregation by species'),
sidebarPanel(
helpText("Select the taxa that you want to extract data for"),
selectInput('group','data type',c('smallMammal','carabid','plantPresenceCover')),
helpText("Select the desired spatial aggregation scale"),
selectInput('space.Agg','spatial scale',c('byDomain','bySite','byPlot')),
helpText("Select the desired temporal aggregation scale"),
selectInput('time.Agg','temporal scale',c("aggAll",'byYear','byMonthYear','byBout')),
helpText("If data type = 'plantPresenceCover' choose the scale at which the data was collected"),
selectInput('typeFiles','file type for plant presence',c("none",'1m2Data','10m2Data','100m2Data','400m2Data')),
numericInput('numcols', label = "number of columns to display",value=4),
h3("Download data"),
downloadButton('downloadData', 'Download')
),
mainPanel(
tabsetPanel(
tabPanel('preview data',
dataTableOutput("aggData")),
tabPanel('summary',
dataTableOutput("summary"))
)
)
))
source("server.R")
shinyApp(ui = ui, server = serverAgg)
ui <- shinyUI(fluidPage(
headerPanel('NEON data aggregation by species'),
sidebarPanel(
#helpText("Select the taxa that you want to extract data for"),
selectInput('group','data type',c('smallMammal','carabid','plantPresenceCover')),
#helpText("Select the desired spatial aggregation scale"),
selectInput('space.Agg','spatial scale',c('byDomain','bySite','byPlot')),
#helpText("Select the desired temporal aggregation scale"),
selectInput('time.Agg','temporal scale',c("aggAll",'byYear','byMonthYear','byBout')),
#helpText("If data type = 'plantPresenceCover' choose the scale at which the data was collected"),
selectInput('typeFiles','file type for plant presence',c("none",'1m2Data','10m2Data','100m2Data','400m2Data')),
numericInput('numcols', label = "number of columns to display",value=4),
h3("Download data"),
downloadButton('downloadData', 'Download')
),
mainPanel(
tabsetPanel(
tabPanel('preview data',
dataTableOutput("aggData")),
tabPanel('summary',
dataTableOutput("summary"))
)
)
))
source("server.R")
shinyApp(ui = ui, server = serverAgg)
