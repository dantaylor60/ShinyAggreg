vars<-all.vars(full.formula)
MF.mat<-rbind(c(0),allterm.generator(length(vars),maxdeg))
namer<-function(x,labels,intercept.label){
ind<-which(x>0)
Li<-length(ind)
if(Li==0){return(as.character(intercept.label))}else{
if(Li==1){
if(x[ind[1]]==1){
return(labels[ind[1]])
}else{
return(paste(labels[ind[1]],"^",x[ind[1]],sep=""))
}
}else{
out<-""
for(i in 1:(Li-1)){
if(x[ind[i]]==1){
out<-paste(out,labels[ind[i]],"*",sep="")
}else{
out<-paste(out,labels[ind[i]],"^",x[ind[i]],"*",sep="")
}
}
if(x[ind[Li]]==1){
out<-paste(out,labels[ind[Li]],sep="")
}else{
out<-paste(out,labels[ind[Li]],"^",x[ind[Li]],sep="")
}
return(out)
}
}
}
rownames(MF.mat)<-apply(MF.mat,1,namer,labels=vars,intercept.label="1")
return(MF.mat)
}
MF.mat=get.MF(full.formula=full.formula,maxdeg=3)
nodes=lapply(1:nrow(MF.mat),function(rr)MF.mat[rr,])
names(nodes)=rownames(MF.mat)
#-- base model
base.get<-function(formula,intercept.label="1"){
vars<-all.vars(formula)
if(length(vars)==1){
return(intercept.label)
}else{
return(full.get(formula,intercept.label)$vertices)
}
}
base.nums<-base.get(as.formula(.~ 1))
MB.mat<-matrix(MF.mat[base.nums,],ncol=dim(MF.mat)[2])
rownames(MB.mat) = "1"
}
nodes
ModelVec <- setRefClass("ModStore",fields=list(models="character"))
ModVec <- ModelVec$new()
ModVec$models = c("1")
getmodspace <- function(maxdeg,nodes,Mchar="1"){
modch=ModelChildren(Mchar=Mchar,nodes=nodes,maxdeg)
ct = sum(modch%in%ModVec$models)
modch = modch[!(modch%in%ModVec$models)]
ModVec$models = unique(c(ModVec$models,modch))
modstemp=unlist(lapply(modch,function(ch){
ch=getmodspace(maxdeg,nodes,Mchar=ch)
ModVec$models = unique(c(ModVec$models,ch))
}))
}
getmodspace(maxdeg=3,nodes,Mchar="1")
ModVec$models
unique(ModVec$models)
length(unique(ModVec$models))
length((ModVec$models))
ModVec$models = c("1")
getmodspace <- function(maxdeg,nodes,Mchar="1"){
modch=ModelChildren(Mchar=Mchar,nodes=nodes,maxdeg)
ct = sum(modch%in%ModVec$models)
modch = modch[!(modch%in%ModVec$models)]
ModVec$models = unique(c(ModVec$models,modch))
modstemp=unlist(lapply(modch,function(ch){
ch=getmodspace(maxdeg,nodes,Mchar=ch)
ModVec$models = unique(c(ModVec$models,ch))
}))
}
getmodspace(maxdeg=3,nodes,Mchar="1")
length(ModVec$models)
length(nodes)
orthobernstein <- function(N,v,x,Legendre=TRUE){
if(Legendre){
ss=sum(unlist(lapply(0:v,function(k){
((-1)^(k+v))*choose(v,k)*
(choose(v,k)*(x^k)*((1-x)^(v-k)))
})))
return(ss)
}else{
sumcoefs <- sum( unlist(lapply(0:v,function(k){
((-1)^k)*choose((2*N+1-k),(v-k))*choose(v,k)*(x^(v-k))
} )))
return(sqrt(2*(N-v)+1)*((1-x)^(N-v))*sumcoefs)
}
}
bernstein <- function(N,v,x,ortho=TRUE,leg=TRUE){
if(ortho){
orthobernstein(N=N,v=v,x=x,Legendre=leg)
}else{
choose(N,v)*(x^v)*((1-x)^(N-v))
}
}
BPmat <- function(N,x,ortho=TRUE,leg=TRUE){
resmat=do.call(cbind,lapply(0:N,function(v){
unlist(lapply(seq_along(x),function(y)
bernstein(N=N,v=v,x=x[y],ortho=ortho,leg=leg)))
}))
colnames(resmat) = paste("x",0:N,sep="")
return(resmat)
}
deg=3
X.preds = matrix(runif(300),ncol=3)
Uni.Leg = lapply(1:ncol(X.preds),function(cc){
BPmat(N=deg,x=cc,ortho=TRUE,leg=TRUE)
})
head(Uni.Leg[[1]])
dim(Uni.Leg[[1]])
dim(X.preds)
Uni.Leg = lapply(1:ncol(X.preds),function(cc){
BPmat(N=deg,x=X.preds[,cc],ortho=TRUE,leg=TRUE)
})
dim(Uni.Leg[[1]])
head(Uni.Leg[[1]])
nodes
prod(X.preds)
Reduce("*",data.frame(X.preds))
Make.X.full = function(Uni.Leg,nodes){
cbind(1,do.call(cbind,lapply(nodes[-1],function(nn){
Reduce("+",lapply(which(nn!=0),function(nn.num){
Uni.Leg[[nn.num]][,nn[nn.num]]
}))
})))
}
head(Make.X.full)
Make.X.full = cbind(1,do.call(cbind,lapply(nodes[-1],function(nn){
Reduce("+",lapply(which(nn!=0),function(nn.num){
Uni.Leg[[nn.num]][,nn[nn.num]]
}))
})))
}
Make.X.full = cbind(1,do.call(cbind,lapply(nodes[-1],function(nn){
Reduce("+",lapply(which(nn!=0),function(nn.num){
Uni.Leg[[nn.num]][,nn[nn.num]]
}))
})))
head(Make.X.full)
head(X.preds)
head(Uni.Leg)
Make.X.full = cbind(1,do.call(cbind,lapply(nodes[-1],function(nn){
Reduce("+",lapply(which(nn!=0),function(nn.num){
Uni.Leg[[nn.num]][,nn[(nn.num+1)]]
}))
})))
head(Make.X.full)
Make.X.full = cbind(1,do.call(cbind,lapply(nodes[-1],function(nn){
Reduce("+",lapply(which(nn!=0),function(nn.num){
Uni.Leg[[nn.num]][,(nn[nn.num]+1)]
}))
})))
head(Make.X.full)
Make.X.full = cbind(1,do.call(cbind,lapply(nodes[-1],function(nn){
Reduce("*",lapply(which(nn!=0),function(nn.num){
Uni.Leg[[nn.num]][,(nn[nn.num]+1)]
}))
})))
head(Make.X.full)
head(Uni.Leg[[1]])
head(Uni.Leg[[2]])
-0.3227369*(-0.9030035)
mu = 1
sd = 1
gamma = -0.4
W = rnorm(1000,mu,sd)
hist(W)
mu = 1
sd = 1
gamma = -0.4
W = rnorm(1000,mu,sd)
W[W<0] = 0
hist(W)
mu = 0.4
sd = 0.1
gamma = -0.4
W = rnorm(1000,mu,sd)
W[W<0] = 0
hist(W)
mu = 0.1
sd = 0.1
gamma = -0.4
W = rnorm(1000,mu,sd)
W[W<0] = 0
hist(W)
require(sn)
plot.selm
29.96*40*4*12
base.formula=as.formula(.~ 1)
formBase=base.formula
terms(reformulate(formBase),keep.order = TRUE)
terms(reformulate("1"),keep.order = TRUE)
setwd("~/Dropbox/Research/SAMSI/MULTIVARIATE/DirichletProcess/Code/Code06012015/FINALCODE")
n = 1200
S = 300
true.r=1
require(fields)
require(snow)
require(inline)
require(ggplot2)
sample.outsites = sample(1:n,100)
sample.outSp10 = round(seq(1,S,length.out=10))
sample.outSp20 = round(seq(1,S,length.out=20))
sample.outSp40 = round(seq(1,S,length.out=40))
lindpred = list(sample.outSp10, sample.outSp20, sample.outSp40)
X=listData[[1]]$x
Y=listData[[1]]$y
B.true=listData[[1]]$beta
out = NULL
load(file="NormalData300.RData")
rvec = 300#c(3,5,10,15,30,50,150)#,300)
nsim=2000
X=listData[[1]]$x
Y=listData[[1]]$y
B.true=listData[[1]]$beta
out = NULL
rvec = c(3,5,10,15,30,50)#,150)#,300)
nsim=2000
require(snowfall)
ncpus=length(rvec)
sfInit(parallel=TRUE, cpus=ncpus)    #make available 16 cores to work in parallel
sfExportAll()
sfSource("FinalFnDimRedDP_Sept2015.R")
listresRed <- sfLapply(rvec,function(r){
out<-GibbsDPDimRed_R(r=r,N=min(S,150),nsim=nsim,burnin=round(0.5*nsim),X=X,Y=Y,alpha=20,
precB=diag(0,6),ortho.fix=T,plotcomp=T,plotclust=F,
Dtrue=NULL,CovarSpec=listData[[1]]$sigma,B.true=B.true,
Ktrue=NULL,saveplots=F,namsim=paste0("sims_r",r),
Xout=NULL,Yout=NULL,plotpred=T,mu0=F,indpred=lindpred,resptype="normal",
indout=sample.outsites,by.species=T,trim.extreme=20,
labelcomp=c("","true","estimate"),
path=NULL)
return(list(A=out$A,K=out$K,Frob=out$FrobNorm))
})
sfStop()
gc()
require(ggplot2)
MatQuants100 <- data.frame(do.call(rbind,lapply(1:length(listresRed),function(x){
cbind(r=rvec[x],Frob=listresRed[[x]]$Frob)
})))
MatQuants100$r=factor(MatQuants100$r)
S=300
pal1="Blues" #color palette
pal2="Set1"
ggplot(MatQuants100, aes(Frob,colour=r)) + geom_density(alpha=0.3,aes(color=r))+ theme_bw() +
scale_fill_brewer(palette=pal1,direction=-1) +
#scale_colour_grey(start = 0, end = 0.8) +
scale_color_brewer(palette=pal2,direction=1) +
xlab(bquote(paste("Frobenius Norm",group("||",Sigma[.(S)]-hat(Sigma)[.(S)],"||")[F]))) +
theme(axis.text.x = element_text(angle = 0, hjust = 1, size=14,color="black")) +
theme(axis.text.y = element_text(angle = 90, hjust = 1, size=14,color="black"))+
theme(axis.title = element_text(size=16,color="black"))+
theme(legend.text = element_text(size=14,color="black"))
ggplot(MatQuants100, aes(Frob,colour=r)) + geom_density(alpha=0.3,aes(color=r))+ theme_bw() +
scale_fill_brewer(palette=pal1) +
#scale_colour_grey(start = 0, end = 0.8) +
scale_color_brewer(palette=pal2,direction=1) +
xlab(bquote(paste("Frobenius Norm",group("||",Sigma[.(S)]-hat(Sigma)[.(S)],"||")[F]))) +
theme(axis.text.x = element_text(angle = 0, hjust = 1, size=14,color="black")) +
theme(axis.text.y = element_text(angle = 90, hjust = 1, size=14,color="black"))+
theme(axis.title = element_text(size=16,color="black"))+
theme(legend.text = element_text(size=14,color="black"))
ggplot(MatQuants100, aes(Frob,colour=r)) + geom_density(alpha=0.3,aes(color=r))+ theme_bw() +
scale_fill_brewer(palette=pal1) +
#scale_colour_grey(start = 0, end = 0.8) +
scale_color_brewer(palette=pal2) +
xlab(bquote(paste("Frobenius Norm",group("||",Sigma[.(S)]-hat(Sigma)[.(S)],"||")[F]))) +
theme(axis.text.x = element_text(angle = 0, hjust = 1, size=14,color="black")) +
theme(axis.text.y = element_text(angle = 90, hjust = 1, size=14,color="black"))+
theme(axis.title = element_text(size=16,color="black"))+
theme(legend.text = element_text(size=14,color="black"))
ggplot(sumData, aes(x=r,y=med)) + geom_line()+ theme_bw() +
geom_ribbon(aes(y=med,ymin=ll, ymax=ul), fill="blue",alpha=0.2) +
scale_fill_brewer(palette=pal1,direction=-1) +
scale_color_brewer(palette=pal2,direction=1) +
xlab("number of columns A matrix") +
ylab("Frobenius norm") +
theme(axis.text.x = element_text(angle = 0, hjust = 1, size=12,color="black")) +
theme(axis.text.y = element_text(angle = 90, hjust = 1, size=12,color="black"))
sumData<-aggregate(formula(Frob~r),data=MatQuants100,FUN=quantile,probs=c(0.025,0.5,0.975))
sumData <- data.frame(r=rvec,sumData[,2])
colnames(sumData) <- c("r","ll","med","ul")
ggplot(sumData, aes(x=r,y=med)) + geom_line()+ theme_bw() +
geom_ribbon(aes(y=med,ymin=ll, ymax=ul), fill="blue",alpha=0.2) +
scale_fill_brewer(palette=pal1,direction=-1) +
scale_color_brewer(palette=pal2,direction=1) +
xlab("number of columns A matrix") +
ylab("Frobenius norm") +
theme(axis.text.x = element_text(angle = 0, hjust = 1, size=12,color="black")) +
theme(axis.text.y = element_text(angle = 90, hjust = 1, size=12,color="black"))
ggplot(sumData, aes(x=r,y=med)) + geom_line()+ theme_bw() +
geom_ribbon(aes(y=med,ymin=ll, ymax=ul), fill="blue",alpha=0.2) +
scale_fill_brewer(palette=pal1) +
scale_color_brewer(palette=pal2) +
xlab("number of columns A matrix") +
ylab("Frobenius norm") +
theme(axis.text.x = element_text(angle = 0, hjust = 1, size=12,color="black")) +
theme(axis.text.y = element_text(angle = 90, hjust = 1, size=12,color="black"))
save.image(paste0("NormalSims3_50S",S,"Apr2016.RData"))
setwd("~/Dropbox/Research/Duke2015/NEON/DataManipulation/ShinyAggreg")
require(chron)
require(reshape2)
require(shiny)
source("server.R")
ui <- shinyUI(fluidPage(
headerPanel('NEON data aggregation by species'),
sidebarPanel(
selectInput('group','data type',c('smallMammal','carabid','plantPresenceCover')),
selectInput('space.Agg','spatial scale',c('byDomain','bySite','byPlot')),
selectInput('time.Agg','temporal scale',c("aggAll",'byYear','byMonthYear','byBout')),
selectInput('typeFiles','file type for plant presence',c("none",'1m2Data','10m2Data','100m2Data','400m2Data')),
numericInput('numcols', label = "number of columns to display",value=4),
h3("Download data"),
downloadButton('downloadData', 'Download')
),
mainPanel(
tabsetPanel(
tabPanel('preview data',
dataTableOutput("aggData")),
tabPanel('summary',
dataTableOutput("summary"))
)
)
))
shinyApp(ui = ui, server = serverAgg)
install.packages("shiny", lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
require(chron)
require(reshape2)
require(shiny)
source("server.R")
ui <- shinyUI(fluidPage(
headerPanel('NEON data aggregation by species'),
sidebarPanel(
selectInput('group','data type',c('smallMammal','carabid','plantPresenceCover')),
selectInput('space.Agg','spatial scale',c('byDomain','bySite','byPlot')),
selectInput('time.Agg','temporal scale',c("aggAll",'byYear','byMonthYear','byBout')),
selectInput('typeFiles','file type for plant presence',c("none",'1m2Data','10m2Data','100m2Data','400m2Data')),
numericInput('numcols', label = "number of columns to display",value=4),
h3("Download data"),
downloadButton('downloadData', 'Download')
),
mainPanel(
tabsetPanel(
tabPanel('preview data',
dataTableOutput("aggData")),
tabPanel('summary',
dataTableOutput("summary"))
)
)
))
shinyApp(ui = ui, server = serverAgg)
install.packages("chron", lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
require(chron)
require(reshape2)
require(shiny)
source("server.R")
ui <- shinyUI(fluidPage(
headerPanel('NEON data aggregation by species'),
sidebarPanel(
selectInput('group','data type',c('smallMammal','carabid','plantPresenceCover')),
selectInput('space.Agg','spatial scale',c('byDomain','bySite','byPlot')),
selectInput('time.Agg','temporal scale',c("aggAll",'byYear','byMonthYear','byBout')),
selectInput('typeFiles','file type for plant presence',c("none",'1m2Data','10m2Data','100m2Data','400m2Data')),
numericInput('numcols', label = "number of columns to display",value=4),
h3("Download data"),
downloadButton('downloadData', 'Download')
),
mainPanel(
tabsetPanel(
tabPanel('preview data',
dataTableOutput("aggData")),
tabPanel('summary',
dataTableOutput("summary"))
)
)
))
shinyApp(ui = ui, server = serverAgg)
require(chron)
require(reshape2)
require(shiny)
source("server.R")
ui <- shinyUI(fluidPage(
headerPanel('NEON data aggregation by species'),
sidebarPanel(
selectInput('group','data type',c('smallMammal','carabid','plantPresenceCover')),
selectInput('space.Agg','spatial scale',c('byDomain','bySite','byPlot')),
selectInput('time.Agg','temporal scale',c("aggAll",'byYear','byMonthYear','byBout')),
selectInput('typeFiles','file type for plant presence',c("none",'1m2Data','10m2Data','100m2Data','400m2Data')),
numericInput('numcols', label = "number of columns to display",value=4),
h3("Download data"),
downloadButton('downloadData', 'Download')
),
mainPanel(
tabsetPanel(
tabPanel('preview data',
dataTableOutput("aggData")),
tabPanel('summary',
dataTableOutput("summary"))
)
)
))
shinyApp(ui = ui, server = serverAgg)
require(chron)
require(reshape2)
require(shiny)
source("server.R")
ui <- shinyUI(fluidPage(
headerPanel('NEON data aggregation by species'),
sidebarPanel(
selectInput('group','data type',c('smallMammal','carabid','plantPresenceCover')),
selectInput('space.Agg','spatial scale',c('byDomain','bySite','byPlot')),
selectInput('time.Agg','temporal scale',c("aggAll",'byYear','byMonthYear','byBout')),
selectInput('typeFiles','file type for plant presence',c("none",'1m2Data','10m2Data','100m2Data','400m2Data')),
numericInput('numcols', label = "number of columns to display",value=4),
h3("Download data"),
downloadButton('downloadData', 'Download')
),
mainPanel(
tabsetPanel(
tabPanel('preview data',
dataTableOutput("aggData")),
tabPanel('summary',
dataTableOutput("summary"))
)
)
))
shinyApp(ui = ui, server = serverAgg)
require(chron)
require(reshape2)
require(shiny)
source("server.R")
ui <- shinyUI(fluidPage(
headerPanel('NEON data aggregation by species'),
sidebarPanel(
selectInput('group','data type',c('smallMammal','carabid','plantPresenceCover')),
selectInput('space.Agg','spatial scale',c('byDomain','bySite','byPlot')),
selectInput('time.Agg','temporal scale',c("aggAll",'byYear','byMonthYear','byBout')),
selectInput('typeFiles','file type for plant presence',c("none",'1m2Data','10m2Data','100m2Data','400m2Data')),
numericInput('numcols', label = "number of columns to display",value=4),
h3("Download data"),
downloadButton('downloadData', 'Download')
),
mainPanel(
tabsetPanel(
tabPanel('preview data',
dataTableOutput("aggData")),
tabPanel('summary',
dataTableOutput("summary"))
)
)
))
shinyApp(ui = ui, server = serverAgg)
require(chron)
require(reshape2)
require(shiny)
source("server.R")
ui <- shinyUI(fluidPage(
headerPanel('NEON data aggregation by species'),
sidebarPanel(
selectInput('group','data type',c('smallMammal','carabid','plantPresenceCover')),
selectInput('space.Agg','spatial scale',c('byDomain','bySite','byPlot')),
selectInput('time.Agg','temporal scale',c("aggAll",'byYear','byMonthYear','byBout')),
selectInput('typeFiles','file type for plant presence',c("none",'1m2Data','10m2Data','100m2Data','400m2Data')),
numericInput('numcols', label = "number of columns to display",value=4),
h3("Download data"),
downloadButton('downloadData', 'Download')
),
mainPanel(
tabsetPanel(
tabPanel('preview data',
dataTableOutput("aggData")),
tabPanel('summary',
dataTableOutput("summary"))
)
)
))
shinyApp(ui = ui, server = serverAgg)
getwd()
setwd("/Users/danieltaylorrodriguez/Dropbox/Research/Duke2015/NEON/DataManipulation")
ls()
getwd()
runApp('ShinyAggreg')
runApp('ShinyAggreg')
runApp('ShinyAggreg')
runApp('ShinyAggreg')
runApp('ShinyAggreg')
setwd("~/Dropbox/Research/Duke2015/NEON/DataManipulation/ShinyAggreg")
setwd("..")
getwd()
require(shiny)
runApp('ShinyAggreg')
library(shiny)
runUrl('https://www.dropbox.com/sh/3udv0m197o0hlyb/AABsFfXZma4jUraS0J9vCy_pa?dl=0')
library(shiny)
runUrl('https://www.dropbox.com/s/ym5l1if2ekjvjhm/ShinyAggreg.zip?dl=0')
runGist("f675a2cede49762c4bfac644ec8a693e")
setwd("~/Dropbox/Research/Duke2015/NEON/DataManipulation/ShinyAggreg")
runGitHub( "ShinyAggreg", "<dantaylor60>")
runGitHub( "ShinyAggreg", "dantaylor60")
runGitHub( "ShinyAggreg", "dantaylor60")
require(shiny)
runGitHub( "ShinyAggreg", "dantaylor60")
require(shiny)
runGitHub( "ShinyAggreg", "dantaylor60")
