ifelse(otherFile=='identification',"collectDateTime","date"))
formatTime <- "y-m-d"
if(otherFile%in%c('capturedata','IDandpinning')){
dataAllDomains$individualID <- as.character(dataAllDomains$individualID)
dataAllDomains = dataAllDomains[!is.na(dataAllDomains$individualID),]
}else{
dataAllDomains = dataAllDomains[!is.na(dataAllDomains$eventID),]
}
if(input$group=="mosquito"){
dataAllDomains$collectDateTime <- unlist(
lapply(as.character(dataAllDomains$collectDateTime),function(ss){
strsplit(x=ss,split=c("T"))[[1]][1]
}))
}
dateValuesDom = chron(as.character(dataAllDomains[,dateVar]),format=formatTime)
dataAllDomains$yr <- as.character(years(dateValuesDom))
dataAllDomains$month <- as.numeric(months(dateValuesDom))
if(input$group=="smallMammal"){
eventIDunique <- as.character(unique(dataAllDomains$eventID))
ndays <- 0
indDom <- indField <- logical(0)
for(id in eventIDunique){
indDom <- (dataAllDomains$eventID==id)
indField <- (dataAllField$eventID==id)
ndays =1+as.numeric(max(dateValuesDom[indDom])-min(dateValuesDom[indDom]))
dataAllField$samplingEffort[indField]=dataAllField$samplingEffort[indField]*ndays
}
}
if(input$group=="mosquito"){
#dimnames(dataAllField)[2][colnames(dataAllField)=="trapHours"] <- "samplingEffort"
colnames(dataAllDomains)[colnames(dataAllDomains)=="scientificName"] <- "taxonID"
}
#dateValuesField = chron(as.character(dataAllField[,dateVar]),format=formatTime)
#dataAllField$yr <- as.character(years(dateValuesField))
#dataAllField$month <- as.numeric(months(dateValuesField))
dataAllDomains$taxonID <- as.character(dataAllDomains$taxonID)
dataAllDomains$taxonID[is.na(dataAllDomains$taxonID)] <- "notID"
if(otherFile=="IDandpinning"){
mm <- as.character(dataAllDomains$month)
mm[nchar(mm)==1] <- paste0("0",mm[nchar(mm)==1],sep="")
dataAllDomains$Bout <- with(dataAllDomains,paste(yr,mm,sep="."))
}else{
dataAllDomains$Bout <- unlist(lapply(1:nrow(dataAllDomains),function(rr){
bout=strsplit(as.character(dataAllDomains$eventID)[rr],split=paste0(dataAllDomains$siteID[rr],"."))[[1]][2]
bout = strsplit(bout,split=".",fixed=T)[[1]]
bout= bout[(length(bout)-1):length(bout)]
if(nchar(bout[2])==1){bout[2]=paste0("0",bout[2])}
bout = paste0(bout,collapse=".")
return(bout)
}))
}
#-----------
colKeep <- c(names(dataAllDomains),mixVars)
if(input$group!="plantPresenceCover"){
dataAllDomains <- merge(x=dataAllDomains, y=dataAllField, by = uniqueid,all.x = T,all.y = F)
dataAllDomains <- dataAllDomains[!duplicated(dataAllDomains),]
}
aggVars <- c(varsaggSpace,varsaggTime)
aggData <- dcast(dataAllDomains,as.formula(paste(paste(aggVars,collapse="+"),"~ taxonID")),
value.var="estimatedAbundance",fun.aggregate=mean,na.rm=T,fill=0)
names(aggData)
mixVars <- unique(c(mixVars,"decimalLatitude","decimalLongitude"))
otheraggData <- dcast(melt(dataAllDomains[,c(aggVars,mixVars)],id.vars=aggVars),
as.formula(paste(paste(aggVars,collapse="+"),"~ variable")),
fun.aggregate=median,na.rm=T,fill=0)
melt(dataAllDomains[,c(aggVars,mixVars)],id.vars=aggVars)
c(aggVars,mixVars)
aggVars
eff <- dcast(melt(dataAllDomains[,c(aggVars,"trapHours")],id.vars=aggVars),
as.formula(paste(paste(aggVars,collapse="+"),"~ variable")),
fun.aggregate=median,na.rm=T,fill=0)
View(eff)
View(otheraggData)
eff <- dcast(melt(dataAllDomains[,c(aggVars,"trapHours")],id.vars=aggVars),
as.formula(paste(paste(aggVars,collapse="+"),"~ variable")),
fun.aggregate=sum,na.rm=T,fill=0)
input <- list()
input$group <- 'mosquito'
input$space.Agg <- 'byPlot'
input$time.Agg <- 'byMonthYear'
filenames  <- list.files(input$group)
varsaggSpace <- character(0)
if(input$space.Agg=="byDomain"){
varsaggSpace = "domainID"
}else{
if(input$space.Agg=="bySite"){
varsaggSpace = c("domainID","siteID")
}else{
varsaggSpace = c("domainID","siteID","plotID")
}
}
varsaggTime <- character(0)
if(input$time.Agg=="aggAll"){
varsaggTime = NULL
}else{
if(input$time.Agg=="byBout"){
varsaggTime = c("yr","month","Bout")
}else{
if(input$time.Agg=="byMonthYear"){
varsaggTime = c("yr","month")
}else{
varsaggTime = c("yr")
}
}
}
if(input$group=="smallMammal"){
otherFile = "capturedata"
fieldFiles = "perplotnight"
uniqueid = c("plotID","eventID","date")
mixVars = c("samplingEffort")
}else{
if(input$group=="carabid"){
otherFile = "IDandpinning"
fieldFiles = "fielddata"
uniqueid = c("plotID","trapID","collectDate")
mixVars = c("daysOfTrapping","decimalLatitude","decimalLongitude","boutNumber")
}else{
if(input$group=="mosquito"){
otherFile = "identification"
fieldFiles = "samplingeffort"
uniqueid = c("plotID","eventID","collectDateTime")
mixVars = NULL
}else{
if(input$group=="pathogen"){
otherFile = "..."
fieldFiles = "..."
uniqueid = c("...")
mixVars = c("...")
}else{
if(input$typeFiles=="none"){
stop("choose 'file type for plant presence' different to 'none'")
}else{
otherFile = input$typeFiles
}
fieldFiles = "Variables"
uniqueid = c("plotID","subplotID","date")
mixVars = NULL#c("percentCover")
}
}
}
}
currentFiles   <- filenames[grep(otherFile,filenames)]
fielddataFiles   <- filenames[grep(fieldFiles,filenames)]
fileData <- matrix( unlist(strsplit(currentFiles,'[.]')),length(currentFiles),byrow=T)
siteData <- matrix( unlist(strsplit(fielddataFiles,'[.]')),length(fielddataFiles),byrow=T)
domain  <- fileData[,2]
site  <- fileData[,3]
ndomain  <- length(unique(domain))
nsite  <- length(site)
dataAllDomains <- dataAllField <- list()
for(k in 1:nsite){
kfile  <- paste(input$group,'/',currentFiles[k],sep='')
kdat <- read.csv(kfile,header=T,na.strings=c(""," "))
dataAllDomains[[site[k]]] <- kdat
ffile <-  paste(input$group,'/',fielddataFiles[k],sep='')
fdat <- read.csv(ffile,header=T,na.strings=c(""," "))
dataAllField[[site[k]]] <- fdat[,which(names(fdat)!="remarks")]
}
colDom <- ncol(dataAllDomains[[1]])
variab <- NULL
datares <- list()
namvars <- colnames(dataAllDomains[[1]])
for(jj in 1:colDom){
datares[[jj]] <- unlist(lapply(dataAllDomains,"[",,jj))
}
names(datares) <- namvars
dataAllDomains <- data.frame(datares,stringsAsFactors = F)
#dataAllDomains <- data.frame(do.call(rbind,dataAllDomains),stringsAsFactors = F)
dataAllField <- do.call(rbind,dataAllField)[,c(uniqueid,mixVars)]
dataAllDomains[dataAllDomains==""] = NA
dateVar <- ifelse(otherFile=='IDandpinning',"collectDate",
ifelse(otherFile=='identification',"collectDateTime","date"))
formatTime <- "y-m-d"
if(otherFile%in%c('capturedata','IDandpinning')){
dataAllDomains$individualID <- as.character(dataAllDomains$individualID)
dataAllDomains = dataAllDomains[!is.na(dataAllDomains$individualID),]
}else{
dataAllDomains = dataAllDomains[!is.na(dataAllDomains$eventID),]
}
if(input$group=="mosquito"){
dataAllDomains$collectDateTime <- unlist(
lapply(as.character(dataAllDomains$collectDateTime),function(ss){
strsplit(x=ss,split=c("T"))[[1]][1]
}))
}
dateValuesDom = chron(as.character(dataAllDomains[,dateVar]),format=formatTime)
dataAllDomains$yr <- as.character(years(dateValuesDom))
dataAllDomains$month <- as.numeric(months(dateValuesDom))
if(input$group=="smallMammal"){
eventIDunique <- as.character(unique(dataAllDomains$eventID))
ndays <- 0
indDom <- indField <- logical(0)
for(id in eventIDunique){
indDom <- (dataAllDomains$eventID==id)
indField <- (dataAllField$eventID==id)
ndays =1+as.numeric(max(dateValuesDom[indDom])-min(dateValuesDom[indDom]))
dataAllField$samplingEffort[indField]=dataAllField$samplingEffort[indField]*ndays
}
}
if(input$group=="mosquito"){
#dimnames(dataAllField)[2][colnames(dataAllField)=="trapHours"] <- "samplingEffort"
colnames(dataAllDomains)[colnames(dataAllDomains)=="scientificName"] <- "taxonID"
}
#dateValuesField = chron(as.character(dataAllField[,dateVar]),format=formatTime)
#dataAllField$yr <- as.character(years(dateValuesField))
#dataAllField$month <- as.numeric(months(dateValuesField))
dataAllDomains$taxonID <- as.character(dataAllDomains$taxonID)
dataAllDomains$taxonID[is.na(dataAllDomains$taxonID)] <- "notID"
if(otherFile=="IDandpinning"){
mm <- as.character(dataAllDomains$month)
mm[nchar(mm)==1] <- paste0("0",mm[nchar(mm)==1],sep="")
dataAllDomains$Bout <- with(dataAllDomains,paste(yr,mm,sep="."))
}else{
dataAllDomains$Bout <- unlist(lapply(1:nrow(dataAllDomains),function(rr){
bout=strsplit(as.character(dataAllDomains$eventID)[rr],split=paste0(dataAllDomains$siteID[rr],"."))[[1]][2]
bout = strsplit(bout,split=".",fixed=T)[[1]]
bout= bout[(length(bout)-1):length(bout)]
if(nchar(bout[2])==1){bout[2]=paste0("0",bout[2])}
bout = paste0(bout,collapse=".")
return(bout)
}))
}
#-----------
colKeep <- c(names(dataAllDomains),mixVars)
if(input$group!="plantPresenceCover"){
dataAllDomains <- merge(x=dataAllDomains, y=dataAllField, by = uniqueid,all.x = T,all.y = F)
dataAllDomains <- dataAllDomains[!duplicated(dataAllDomains),]
}
aggVars <- c(varsaggSpace,varsaggTime)
aggData <- dcast(dataAllDomains,as.formula(paste(paste(aggVars,collapse="+"),"~ taxonID")),
value.var="estimatedAbundance",fun.aggregate=mean,na.rm=T,fill=0)
mixVars <- unique(c(mixVars,"decimalLatitude","decimalLongitude"))
otheraggData <- dcast(melt(dataAllDomains[,c(aggVars,mixVars)],id.vars=aggVars),
as.formula(paste(paste(aggVars,collapse="+"),"~ variable")),
fun.aggregate=mean,na.rm=T,fill=0)
require(chron)
require(reshape2)
require(shiny)
aggData <- dcast(dataAllDomains,as.formula(paste(paste(aggVars,collapse="+"),"~ taxonID")),
value.var="estimatedAbundance",fun.aggregate=mean,na.rm=T,fill=0)
mixVars <- unique(c(mixVars,"decimalLatitude","decimalLongitude"))
otheraggData <- dcast(melt(dataAllDomains[,c(aggVars,mixVars)],id.vars=aggVars),
as.formula(paste(paste(aggVars,collapse="+"),"~ variable")),
fun.aggregate=mean,na.rm=T,fill=0)
filenames  <- list.files(input$group)
varsaggSpace <- character(0)
if(input$space.Agg=="byDomain"){
varsaggSpace = "domainID"
}else{
if(input$space.Agg=="bySite"){
varsaggSpace = c("domainID","siteID")
}else{
varsaggSpace = c("domainID","siteID","plotID")
}
}
varsaggTime <- character(0)
if(input$time.Agg=="aggAll"){
varsaggTime = NULL
}else{
if(input$time.Agg=="byBout"){
varsaggTime = c("yr","month","Bout")
}else{
if(input$time.Agg=="byMonthYear"){
varsaggTime = c("yr","month")
}else{
varsaggTime = c("yr")
}
}
}
if(input$group=="smallMammal"){
otherFile = "capturedata"
fieldFiles = "perplotnight"
uniqueid = c("plotID","eventID","date")
mixVars = c("samplingEffort")
}else{
if(input$group=="carabid"){
otherFile = "IDandpinning"
fieldFiles = "fielddata"
uniqueid = c("plotID","trapID","collectDate")
mixVars = c("daysOfTrapping","decimalLatitude","decimalLongitude","boutNumber")
}else{
if(input$group=="mosquito"){
otherFile = "identification"
fieldFiles = "samplingeffort"
uniqueid = c("plotID","eventID","collectDateTime")
mixVars = NULL
}else{
if(input$group=="pathogen"){
otherFile = "..."
fieldFiles = "..."
uniqueid = c("...")
mixVars = c("...")
}else{
if(input$typeFiles=="none"){
stop("choose 'file type for plant presence' different to 'none'")
}else{
otherFile = input$typeFiles
}
fieldFiles = "Variables"
uniqueid = c("plotID","subplotID","date")
mixVars = NULL#c("percentCover")
}
}
}
}
currentFiles   <- filenames[grep(otherFile,filenames)]
fielddataFiles   <- filenames[grep(fieldFiles,filenames)]
fileData <- matrix( unlist(strsplit(currentFiles,'[.]')),length(currentFiles),byrow=T)
siteData <- matrix( unlist(strsplit(fielddataFiles,'[.]')),length(fielddataFiles),byrow=T)
domain  <- fileData[,2]
site  <- fileData[,3]
ndomain  <- length(unique(domain))
nsite  <- length(site)
dataAllDomains <- dataAllField <- list()
for(k in 1:nsite){
kfile  <- paste(input$group,'/',currentFiles[k],sep='')
kdat <- read.csv(kfile,header=T,na.strings=c(""," "))
dataAllDomains[[site[k]]] <- kdat
ffile <-  paste(input$group,'/',fielddataFiles[k],sep='')
fdat <- read.csv(ffile,header=T,na.strings=c(""," "))
dataAllField[[site[k]]] <- fdat[,which(names(fdat)!="remarks")]
}
colDom <- ncol(dataAllDomains[[1]])
variab <- NULL
datares <- list()
namvars <- colnames(dataAllDomains[[1]])
for(jj in 1:colDom){
datares[[jj]] <- unlist(lapply(dataAllDomains,"[",,jj))
}
names(datares) <- namvars
dataAllDomains <- data.frame(datares,stringsAsFactors = F)
#dataAllDomains <- data.frame(do.call(rbind,dataAllDomains),stringsAsFactors = F)
dataAllField <- do.call(rbind,dataAllField)[,c(uniqueid,mixVars)]
dataAllDomains[dataAllDomains==""] = NA
dateVar <- ifelse(otherFile=='IDandpinning',"collectDate",
ifelse(otherFile=='identification',"collectDateTime","date"))
formatTime <- "y-m-d"
if(otherFile%in%c('capturedata','IDandpinning')){
dataAllDomains$individualID <- as.character(dataAllDomains$individualID)
dataAllDomains = dataAllDomains[!is.na(dataAllDomains$individualID),]
}else{
dataAllDomains = dataAllDomains[!is.na(dataAllDomains$eventID),]
}
if(input$group=="mosquito"){
dataAllDomains$collectDateTime <- unlist(
lapply(as.character(dataAllDomains$collectDateTime),function(ss){
strsplit(x=ss,split=c("T"))[[1]][1]
}))
}
dateValuesDom = chron(as.character(dataAllDomains[,dateVar]),format=formatTime)
dataAllDomains$yr <- as.character(years(dateValuesDom))
dataAllDomains$month <- as.numeric(months(dateValuesDom))
colnames(dataAllDomains)[colnames(dataAllDomains)=="scientificName"] <- "taxonID"
dataAllDomains$taxonID <- as.character(dataAllDomains$taxonID)
dataAllDomains$taxonID[is.na(dataAllDomains$taxonID)] <- "notID"
dataAllDomains$Bout <- unlist(lapply(1:nrow(dataAllDomains),function(rr){
bout=strsplit(as.character(dataAllDomains$eventID)[rr],split=paste0(dataAllDomains$siteID[rr],"."))[[1]][2]
bout = strsplit(bout,split=".",fixed=T)[[1]]
bout= bout[(length(bout)-1):length(bout)]
if(nchar(bout[2])==1){bout[2]=paste0("0",bout[2])}
bout = paste0(bout,collapse=".")
return(bout)
}))
colKeep <- c(names(dataAllDomains),mixVars)
if(input$group!="plantPresenceCover"){
dataAllDomains <- merge(x=dataAllDomains, y=dataAllField, by = uniqueid,all.x = T,all.y = F)
dataAllDomains <- dataAllDomains[!duplicated(dataAllDomains),]
}
aggVars <- c(varsaggSpace,varsaggTime)
(input$group=="mosquito")
aggData <- dcast(dataAllDomains,as.formula(paste(paste(aggVars,collapse="+"),"~ taxonID")),
value.var="estimatedAbundance",fun.aggregate=mean,na.rm=T,fill=0)
head(aggData)
mixVars <- unique(c(mixVars,"decimalLatitude","decimalLongitude"))
otheraggData <- dcast(melt(dataAllDomains[,c(aggVars,mixVars)],id.vars=aggVars),
as.formula(paste(paste(aggVars,collapse="+"),"~ variable")),
fun.aggregate=mean,na.rm=T,fill=0)
head(otheraggData)
mixVars,
mixVars
otheraggData <- dcast(melt(dataAllDomains[,c(aggVars,mixVars,"trapHours")],id.vars=aggVars),
as.formula(paste(paste(aggVars,collapse="+"),"~ variable")),
fun.aggregate=mean,na.rm=T,fill=0)
head(otheraggData)
trapNum <- dcast(melt(dataAllDomains[,c(aggVars,mixVars)],id.vars=aggVars),
as.formula(paste(paste(aggVars,collapse="+"),"~ variable")),
fun.aggregate=length,na.rm=T,fill=0)
aggVars
trapNum <- dcast(melt(dataAllDomains[,c(aggVars,"trapHours")],id.vars=aggVars),
as.formula(paste(paste(aggVars,collapse="+"),"~ variable")),
fun.aggregate=length,na.rm=T,fill=0)
}
melt(dataAllDomains[,c(aggVars,"trapHours")],id.vars=aggVars)
head(melt(dataAllDomains[,c(aggVars,"trapHours")],id.vars=aggVars))
trapNum <- dcast(melt(dataAllDomains[,c(aggVars,"trapHours")],id.vars=aggVars),
as.formula(paste(paste(aggVars,collapse="+"),"~ variable")),
fun.aggregate=length,na.rm=T,fill=0)
as.formula(paste(paste(aggVars,collapse="+"),"~ variable"))
head(melt(dataAllDomains[,c(aggVars)],id.vars=aggVars))
dimn(melt(dataAllDomains[,c(aggVars)],id.vars=aggVars))
dim(melt(dataAllDomains[,c(aggVars)],id.vars=aggVars))
trapNum <- dcast(dataAllDomains,
as.formula(paste(paste(aggVars,collapse="+"),"~ 1")),
fun.aggregate=sum,na.rm=T,fill=0)
trapNum <- dcast(dataAllDomains,
as.formula(paste(paste(aggVars,collapse="+"),"~ 1")),
fun.aggregate=length,na.rm=T,fill=0)
trapNum <- dcast(dataAllDomains,
as.formula(paste(paste(aggVars,collapse="+"),"~ plotID")),
fun.aggregate=length,na.rm=T,fill=0)
head(otheraggData)
trapNum <- paste0(dataAllDomains[,aggVars],collapse="_")
trapNum
trapNum <- apply(dataAllDomains[,aggVars],1,paste0,collapse="_")
trapNum
head(dataAllDomains[,aggVars])
trapNum <- apply(dataAllDomains[,aggVars[-(1:2)]],1,paste0,collapse="_")
trapNum
head(trapNum)
trapNum <- table(apply(dataAllDomains[,aggVars[-(1:2)]],1,paste0,collapse="_"))
trapNum
trapNum <- lapply(apply(dataAllDomains[,aggVars[-(1:2)]],1,paste0,collapse="_"),
length)
trapNum[1:5]
unique(apply(dataAllDomains[,aggVars[-(1:2)]],1,paste0,collapse="_"))
head(eventID)
eventID <- apply(dataAllDomains[,aggVars[-(1:2)]],1,paste0,collapse="_")
head(eventID)
head(unique(eventID))
trapNum <- lapply(unique(eventID),function(ev)sum(eventID==ev))
head(trapNum)
eventID <- apply(dataAllDomains[,aggVars[-(1:2)]],1,paste0,collapse="_")
trapNum <- lapply(unique(eventID),function(ev)sum(eventID==ev))
names(trapNum) = unique(eventID)
head(trapNum)
trapNum <- unlist(trapNum)
head(trapNum)
View(otheraggData)
(trapNum)[1:10]
aggVars
eventID <- apply(dataAllDomains[,aggVars],1,paste0,collapse="_")
unieventID <- apply(aggData[,aggVars],1,paste0,collapse="_")
numTraps <- lapply(unieventID,function(ev)sum(eventID==ev))
names(numTraps) = unieventID
numTraps <- unlist(numTraps)
aggData <- dcast(dataAllDomains,as.formula(paste(paste(aggVars,collapse="+"),"~ taxonID")),
value.var="estimatedAbundance",fun.aggregate=sum,na.rm=T,fill=0)
mixVars <- unique(c(mixVars,"decimalLatitude","decimalLongitude"))
otheraggData <- dcast(melt(dataAllDomains[,c(aggVars,mixVars,"trapHours")],id.vars=aggVars),
as.formula(paste(paste(aggVars,collapse="+"),"~ variable")),
fun.aggregate=mean,na.rm=T,fill=0)
eventID <- apply(dataAllDomains[,aggVars],1,paste0,collapse="_")
unieventID <- apply(aggData[,aggVars],1,paste0,collapse="_")
numTraps <- lapply(unieventID,function(ev)sum(eventID==ev))
names(numTraps) = unieventID
numTraps <- unlist(numTraps)
otheraggData$numTraps <- numTraps
View(otheraggData)
mixVars
aggData <- dcast(dataAllDomains,as.formula(paste(paste(aggVars,collapse="+"),"~ taxonID")),
value.var="estimatedAbundance",fun.aggregate=sum,na.rm=T,fill=0)
mixVars <- unique(c(mixVars,"decimalLatitude","decimalLongitude"))
otheraggData <- dcast(melt(dataAllDomains[,c(aggVars,mixVars,"trapHours")],id.vars=aggVars),
as.formula(paste(paste(aggVars,collapse="+"),"~ variable")),
fun.aggregate=mean,na.rm=T,fill=0)
eventID <- apply(dataAllDomains[,aggVars],1,paste0,collapse="_")
unieventID <- apply(aggData[,aggVars],1,paste0,collapse="_")
numTraps <- lapply(unieventID,function(ev)sum(eventID==ev))
names(numTraps) = unieventID
numTraps <- unlist(numTraps)
otheraggData$numTraps <- numTraps
aggData <- merge(y=aggData, x=otheraggData, all.x = T,all.y = T)
View(aggData)
require(shiny)
ui <- shinyUI(fluidPage(
headerPanel('NEON data aggregation by species'),
sidebarPanel(
selectInput('group','data type',c('smallMammal','carabid','mosquito',
'pathogen','plantPresenceCover')),
selectInput('space.Agg','spatial scale',c('byDomain','bySite','byPlot')),
selectInput('time.Agg','temporal scale',c("aggAll",'byYear','byMonthYear','byBout')),
selectInput('typeFiles','file type for plant presence',c("none",'1m2Data','10m2Data','100m2Data','400m2Data')),
numericInput('numcols', label = "number of columns to display",value=4),
h3("Download data"),
downloadButton('downloadData', 'Download')
),
mainPanel(
tabsetPanel(
tabPanel('help',
em(helpText("This code will help you extract data from the NEON project for three different
types of species: small mammals, carabids and plant cover.  These data can then be aggregated
using different choices of spatial and temporal resolution.")),
helpText(strong('data type:'), "Choose the taxa for which you want data."),
helpText(strong('spatial scale:'), "Choice of spatial aggregation scale."),
helpText(strong('temporal scale:'), "Choice of temporal aggregation scale."),
helpText(strong('file type for plant presence:'), "If data type = 'plantPresenceCover' choose the scale at which the data was collected
among 1m2, 10m2, 100m2 or 400m2."),
helpText(strong('number of columns to display:'), "Given that the NEON files contain information on several hundred
species, this choice is only used for immediate visualization purposes.  It determines the number of columns
that are shown in the 'preview data' tab.  If a large number of columns is selected you will need to scroll to
the right to see some of them."),
helpText(strong('Download data:'), "Press this button to generate and download to your computer
a copy of the dataset generated by the code.")),
tabPanel('preview data',
dataTableOutput("aggData")),
tabPanel('summary',
dataTableOutput("summary"))
)
)
))
source("serverMosq.R")
shinyApp(ui = ui, server = serverAgg)
