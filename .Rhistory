}else{
if(input$time.Agg=="byBout"){
varsaggTime = c("yr","month","Bout")
}else{
if(input$time.Agg=="byMonthYear"){
varsaggTime = c("yr","month")
}else{
varsaggTime = c("yr")
}
}
}
if(input$group=="smallMammal"){
otherFile = "capturedata"
fieldFiles = "perplotnight"
uniqueid = c("plotID","eventID","date")
mixVars = c("samplingEffort")
}else{
if(input$group=="carabid"){
otherFile = "IDandpinning"
fieldFiles = "fielddata"
uniqueid = c("plotID","trapID","collectDate")
mixVars = c("daysOfTrapping","decimalLatitude","decimalLongitude","boutNumber")
}else{
if(input$typeFiles=="none"){
stop("choose 'file type for plant presence' different to 'none'")
}else{
otherFile = input$typeFiles
}
fieldFiles = "Variables"
uniqueid = c("plotID","subplotID","date")
mixVars = NULL#c("percentCover")
}
}
currentFiles   <- filenames[grep(otherFile,filenames)]
fielddataFiles   <- filenames[grep(fieldFiles,filenames)]
fileData <- matrix( unlist(strsplit(currentFiles,'[.]')),length(currentFiles),byrow=T)
siteData <- matrix( unlist(strsplit(fielddataFiles,'[.]')),length(fielddataFiles),byrow=T)
domain  <- fileData[,2]
site  <- fileData[,3]
ndomain  <- length(unique(domain))
nsite  <- length(site)
dataAllDomains <- dataAllField <- list()
for(k in 1:nsite){
kfile  <- paste(input$group,'/',currentFiles[k],sep='')
kdat <- read.csv(kfile,header=T)
dataAllDomains[[site[k]]] <- kdat
ffile <-  paste(input$group,'/',fielddataFiles[k],sep='')
fdat <- read.csv(ffile,header=T)
dataAllField[[site[k]]] <- fdat[,-which(names(fdat)=="remarks")]
}
dataAllDomains <- data.frame(do.call(rbind,dataAllDomains),stringsAsFactors = F)
dataAllField <- do.call(rbind,dataAllField)[,c(uniqueid,mixVars)]
dataAllDomains[dataAllDomains==""] = NA
dateVar <- ifelse(otherFile!='IDandpinning',"date","collectDate")
formatTime <- "y-m-d"
if(otherFile%in%c('capturedata','IDandpinning')){
dataAllDomains$individualID <- as.character(dataAllDomains$individualID)
dataAllDomains = dataAllDomains[!is.na(dataAllDomains$individualID),]
}else{
dataAllDomains = dataAllDomains[!is.na(dataAllDomains$eventID),]
}
dateValuesDom = chron(as.character(dataAllDomains[,dateVar]),format=formatTime)
dataAllDomains$yr <- as.character(years(dateValuesDom))
dataAllDomains$month <- as.numeric(months(dateValuesDom))
if(input$group=="smallMammal"){
eventIDunique <- as.character(unique(dataAllDomains$eventID))
ndays <- 0
indDom <- indField <- logical(0)
for(id in eventIDunique){
indDom <- (dataAllDomains$eventID==id)
indField <- (dataAllField$eventID==id)
ndays =as.numeric(max(dateValuesDom[indDom])-min(dateValuesDom[indDom]))
dataAllField$samplingEffort[indField]=dataAllField$samplingEffort[indField]*ndays
}
}
#dateValuesField = chron(as.character(dataAllField[,dateVar]),format=formatTime)
#dataAllField$yr <- as.character(years(dateValuesField))
#dataAllField$month <- as.numeric(months(dateValuesField))
dataAllDomains$taxonID <- as.character(dataAllDomains$taxonID)
dataAllDomains$taxonID[is.na(dataAllDomains$taxonID)] <- "notID"
if(otherFile=="IDandpinning"){
mm <- as.character(dataAllDomains$month)
mm[nchar(mm)==1] <- paste0("0",mm[nchar(mm)==1],sep="")
dataAllDomains$Bout <- with(dataAllDomains,paste(yr,mm,sep="."))
}else{
dataAllDomains$Bout <- unlist(lapply(1:nrow(dataAllDomains),function(rr){
bout=strsplit(as.character(dataAllDomains$eventID)[rr],split=paste0(dataAllDomains$siteID[rr],"."))[[1]][2]
bout = strsplit(bout,split=".",fixed=T)[[1]]
bout= bout[(length(bout)-1):length(bout)]
if(nchar(bout[2])==1){bout[2]=paste0("0",bout[2])}
bout = paste0(bout,collapse=".")
return(bout)
}))
}
#-----------
colKeep <- c(names(dataAllDomains),mixVars)
if(input$group!="plantPresenceCover"){
dataAllDomains <- merge(x=dataAllDomains, y=dataAllField, by = uniqueid,all.x = T,all.y = F)
dataAllDomains <- dataAllDomains[!duplicated(dataAllDomains),]
}
list(data=dataAllDomains,varsaggTime=varsaggTime,varsaggSpace=varsaggSpace,mixVars=mixVars)
}
dataAllDomains <- allDomains()$data
varsaggTime <-  allDomains()$varsaggTime
varsaggSpace <- allDomains()$varsaggSpace
mixVars <- allDomains()$mixVars
mixVars
aggVars <- c(varsaggSpace,varsaggTime)
mixVars <- unique(c(mixVars,"decimalLatitude","decimalLongitude"))
mixVars
aggVars
aggData <- dcast(dataAllDomains,as.formula(paste(paste(aggVars,collapse="+"),"~ taxonID")),
value.var="taxonID",fun.aggregate=length,fill=0)
head(aggData)
aggVars
mixVars
otheraggData <- dcast(melt(dataAllDomains[,c(aggVars,mixVars[mixVars!="daysOfTrapping"])],
id.vars=aggVars),as.formula(paste(paste(aggVars,collapse="+"),"~ variable")),
fun.aggregate=median,na.rm=T,fill=0)
head(otheraggData)
varsaggTime
otheraggData <- dcast(melt(dataAllDomains[,c(aggVars,mixVars[mixVars!="daysOfTrapping"])],
id.vars=c(aggVars,"boutNumber")),
as.formula(paste(paste(aggVars,collapse="+")," + boutNumber~ variable")),
fun.aggregate=median,na.rm=T,fill=0)
head(otheraggData)
View(dataAllDomains)
allDomains <- function(){
filenames  <- list.files(input$group)
varsaggSpace <- character(0)
if(input$space.Agg=="byDomain"){
varsaggSpace = "domainID"
}else{
if(input$space.Agg=="bySite"){
varsaggSpace = c("domainID","siteID")
}else{
varsaggSpace = c("domainID","siteID","plotID")
}
}
varsaggTime <- character(0)
if(input$time.Agg=="aggAll"){
varsaggTime = NULL
}else{
if(input$time.Agg=="byBout"){
varsaggTime = c("yr","month","Bout")
}else{
if(input$time.Agg=="byMonthYear"){
varsaggTime = c("yr","month")
}else{
varsaggTime = c("yr")
}
}
}
if(input$group=="smallMammal"){
otherFile = "capturedata"
fieldFiles = "perplotnight"
uniqueid = c("plotID","eventID","date")
mixVars = c("samplingEffort")
}else{
if(input$group=="carabid"){
otherFile = "IDandpinning"
fieldFiles = "fielddata"
uniqueid = c("plotID","trapID","collectDate")
mixVars = c("daysOfTrapping","decimalLatitude","decimalLongitude","boutNumber")
}else{
if(input$typeFiles=="none"){
stop("choose 'file type for plant presence' different to 'none'")
}else{
otherFile = input$typeFiles
}
fieldFiles = "Variables"
uniqueid = c("plotID","subplotID","date")
mixVars = NULL#c("percentCover")
}
}
currentFiles   <- filenames[grep(otherFile,filenames)]
fielddataFiles   <- filenames[grep(fieldFiles,filenames)]
fileData <- matrix( unlist(strsplit(currentFiles,'[.]')),length(currentFiles),byrow=T)
siteData <- matrix( unlist(strsplit(fielddataFiles,'[.]')),length(fielddataFiles),byrow=T)
domain  <- fileData[,2]
site  <- fileData[,3]
ndomain  <- length(unique(domain))
nsite  <- length(site)
dataAllDomains <- dataAllField <- list()
for(k in 1:nsite){
kfile  <- paste(input$group,'/',currentFiles[k],sep='')
kdat <- read.csv(kfile,header=T)
dataAllDomains[[site[k]]] <- kdat
ffile <-  paste(input$group,'/',fielddataFiles[k],sep='')
fdat <- read.csv(ffile,header=T)
dataAllField[[site[k]]] <- fdat[,-which(names(fdat)=="remarks")]
}
dataAllDomains <- data.frame(do.call(rbind,dataAllDomains),stringsAsFactors = F)
dataAllField <- do.call(rbind,dataAllField)[,c(uniqueid,mixVars)]
dataAllDomains[dataAllDomains==""] = NA
dateVar <- ifelse(otherFile!='IDandpinning',"date","collectDate")
formatTime <- "y-m-d"
if(otherFile%in%c('capturedata','IDandpinning')){
dataAllDomains$individualID <- as.character(dataAllDomains$individualID)
dataAllDomains = dataAllDomains[!is.na(dataAllDomains$individualID),]
}else{
dataAllDomains = dataAllDomains[!is.na(dataAllDomains$eventID),]
}
dateValuesDom = chron(as.character(dataAllDomains[,dateVar]),format=formatTime)
dataAllDomains$yr <- as.character(years(dateValuesDom))
dataAllDomains$month <- as.numeric(months(dateValuesDom))
if(input$group=="smallMammal"){
eventIDunique <- as.character(unique(dataAllDomains$eventID))
ndays <- 0
indDom <- indField <- logical(0)
for(id in eventIDunique){
indDom <- (dataAllDomains$eventID==id)
indField <- (dataAllField$eventID==id)
ndays =as.numeric(max(dateValuesDom[indDom])-min(dateValuesDom[indDom]))
dataAllField$samplingEffort[indField]=dataAllField$samplingEffort[indField]*ndays
}
}
#dateValuesField = chron(as.character(dataAllField[,dateVar]),format=formatTime)
#dataAllField$yr <- as.character(years(dateValuesField))
#dataAllField$month <- as.numeric(months(dateValuesField))
dataAllDomains$taxonID <- as.character(dataAllDomains$taxonID)
dataAllDomains$taxonID[is.na(dataAllDomains$taxonID)] <- "notID"
if(otherFile=="IDandpinning"){
mm <- as.character(dataAllDomains$month)
mm[nchar(mm)==1] <- paste0("0",mm[nchar(mm)==1],sep="")
dataAllDomains$Bout <- with(dataAllDomains,paste(yr,mm,sep="."))
}else{
dataAllDomains$Bout <- unlist(lapply(1:nrow(dataAllDomains),function(rr){
bout=strsplit(as.character(dataAllDomains$eventID)[rr],split=paste0(dataAllDomains$siteID[rr],"."))[[1]][2]
bout = strsplit(bout,split=".",fixed=T)[[1]]
bout= bout[(length(bout)-1):length(bout)]
if(nchar(bout[2])==1){bout[2]=paste0("0",bout[2])}
bout = paste0(bout,collapse=".")
return(bout)
}))
}
#-----------
colKeep <- c(names(dataAllDomains),mixVars)
if(input$group!="plantPresenceCover"){
dataAllDomains <- merge(x=dataAllDomains, y=dataAllField, by = uniqueid,all.x = T,all.y = F)
dataAllDomains <- dataAllDomains[!duplicated(dataAllDomains),]
}
list(data=dataAllDomains,varsaggTime=varsaggTime,varsaggSpace=varsaggSpace,mixVars=mixVars)
}
dataAllDomains <- allDomains()$data
View(dataAllDomains)
allDomains <- function(){
filenames  <- list.files(input$group)
varsaggSpace <- character(0)
if(input$space.Agg=="byDomain"){
varsaggSpace = "domainID"
}else{
if(input$space.Agg=="bySite"){
varsaggSpace = c("domainID","siteID")
}else{
varsaggSpace = c("domainID","siteID","plotID")
}
}
varsaggTime <- character(0)
if(input$time.Agg=="aggAll"){
varsaggTime = NULL
}else{
if(input$time.Agg=="byBout"){
varsaggTime = c("yr","month","Bout")
}else{
if(input$time.Agg=="byMonthYear"){
varsaggTime = c("yr","month")
}else{
varsaggTime = c("yr")
}
}
}
if(input$group=="smallMammal"){
otherFile = "capturedata"
fieldFiles = "perplotnight"
uniqueid = c("plotID","eventID","date")
mixVars = c("samplingEffort")
}else{
if(input$group=="carabid"){
otherFile = "IDandpinning"
fieldFiles = "fielddata"
uniqueid = c("plotID","trapID","collectDate")
mixVars = c("daysOfTrapping","decimalLatitude","decimalLongitude","boutNumber")
}else{
if(input$typeFiles=="none"){
stop("choose 'file type for plant presence' different to 'none'")
}else{
otherFile = input$typeFiles
}
fieldFiles = "Variables"
uniqueid = c("plotID","subplotID","date")
mixVars = NULL#c("percentCover")
}
}
currentFiles   <- filenames[grep(otherFile,filenames)]
fielddataFiles   <- filenames[grep(fieldFiles,filenames)]
fileData <- matrix( unlist(strsplit(currentFiles,'[.]')),length(currentFiles),byrow=T)
siteData <- matrix( unlist(strsplit(fielddataFiles,'[.]')),length(fielddataFiles),byrow=T)
domain  <- fileData[,2]
site  <- fileData[,3]
ndomain  <- length(unique(domain))
nsite  <- length(site)
dataAllDomains <- dataAllField <- list()
for(k in 1:nsite){
kfile  <- paste(input$group,'/',currentFiles[k],sep='')
kdat <- read.csv(kfile,header=T)
dataAllDomains[[site[k]]] <- kdat
ffile <-  paste(input$group,'/',fielddataFiles[k],sep='')
fdat <- read.csv(ffile,header=T)
dataAllField[[site[k]]] <- fdat[,-which(names(fdat)=="remarks")]
}
dataAllDomains <- data.frame(do.call(rbind,dataAllDomains),stringsAsFactors = F)
dataAllField <- do.call(rbind,dataAllField)[,c(uniqueid,mixVars)]
dataAllDomains[dataAllDomains==""] = NA
dateVar <- ifelse(otherFile!='IDandpinning',"date","collectDate")
formatTime <- "y-m-d"
if(otherFile%in%c('capturedata','IDandpinning')){
dataAllDomains$individualID <- as.character(dataAllDomains$individualID)
dataAllDomains = dataAllDomains[!is.na(dataAllDomains$individualID),]
}else{
dataAllDomains = dataAllDomains[!is.na(dataAllDomains$eventID),]
}
dateValuesDom = chron(as.character(dataAllDomains[,dateVar]),format=formatTime)
dataAllDomains$yr <- as.character(years(dateValuesDom))
dataAllDomains$month <- as.numeric(months(dateValuesDom))
if(input$group=="smallMammal"){
eventIDunique <- as.character(unique(dataAllDomains$eventID))
ndays <- 0
indDom <- indField <- logical(0)
for(id in eventIDunique){
indDom <- (dataAllDomains$eventID==id)
indField <- (dataAllField$eventID==id)
ndays =as.numeric(max(dateValuesDom[indDom])-min(dateValuesDom[indDom]))
dataAllField$samplingEffort[indField]=dataAllField$samplingEffort[indField]*ndays
}
}
#dateValuesField = chron(as.character(dataAllField[,dateVar]),format=formatTime)
#dataAllField$yr <- as.character(years(dateValuesField))
#dataAllField$month <- as.numeric(months(dateValuesField))
dataAllDomains$taxonID <- as.character(dataAllDomains$taxonID)
dataAllDomains$taxonID[is.na(dataAllDomains$taxonID)] <- "notID"
if(otherFile=="IDandpinning"){
mm <- as.character(dataAllDomains$boutNumber)#as.character(dataAllDomains$month)
mm[nchar(mm)==1] <- paste0("0",mm[nchar(mm)==1],sep="")
dataAllDomains$Bout <- with(dataAllDomains,paste(yr,mm,sep="."))
}else{
dataAllDomains$Bout <- unlist(lapply(1:nrow(dataAllDomains),function(rr){
bout=strsplit(as.character(dataAllDomains$eventID)[rr],split=paste0(dataAllDomains$siteID[rr],"."))[[1]][2]
bout = strsplit(bout,split=".",fixed=T)[[1]]
bout= bout[(length(bout)-1):length(bout)]
if(nchar(bout[2])==1){bout[2]=paste0("0",bout[2])}
bout = paste0(bout,collapse=".")
return(bout)
}))
}
#-----------
colKeep <- c(names(dataAllDomains),mixVars)
if(input$group!="plantPresenceCover"){
dataAllDomains <- merge(x=dataAllDomains, y=dataAllField, by = uniqueid,all.x = T,all.y = F)
dataAllDomains <- dataAllDomains[!duplicated(dataAllDomains),]
}
list(data=dataAllDomains,varsaggTime=varsaggTime,varsaggSpace=varsaggSpace,mixVars=mixVars)
}
dataAllDomains <- allDomains()$data
varsaggTime <-  allDomains()$varsaggTime
varsaggSpace <- allDomains()$varsaggSpace
mixVars <- allDomains()$mixVars
aggVars <- c(varsaggSpace,varsaggTime)
aggVars
aggData <- dcast(dataAllDomains,as.formula(paste(paste(aggVars,collapse="+"),"~ taxonID")),
value.var="taxonID",fun.aggregate=length,fill=0)
(input$group=="carabid")
mixVars <- unique(c(mixVars,"decimalLatitude","decimalLongitude"))
otheraggData <- dcast(melt(dataAllDomains[,c(aggVars,mixVars[mixVars!="daysOfTrapping"])],
id.vars=aggVars),as.formula(paste(paste(aggVars,collapse="+"),"~ variable")),
fun.aggregate=median,na.rm=T,fill=0)
otheraggData2 <- dcast(melt(dataAllDomains[,c(aggVars,"daysOfTrapping"])],
id.vars=aggVars),as.formula(paste(paste(aggVars,collapse="+"),"~ variable")),
fun.aggregate=sum,na.rm=T,fill=0)
otheraggData <- dcast(melt(dataAllDomains[,c(aggVars,mixVars[mixVars!="daysOfTrapping"])],
id.vars=aggVars),as.formula(paste(paste(aggVars,collapse="+"),"~ variable")),
fun.aggregate=median,na.rm=T,fill=0)
mixVars <- unique(c(mixVars,"decimalLatitude","decimalLongitude"))
otheraggData <- dcast(melt(dataAllDomains[,c(aggVars,mixVars[mixVars!="daysOfTrapping"])],
id.vars=aggVars),as.formula(paste(paste(aggVars,collapse="+"),"~ variable")),
fun.aggregate=median,na.rm=T,fill=0)
otheraggData2 <- dcast(melt(dataAllDomains[,c(aggVars,"daysOfTrapping")],
id.vars=aggVars),as.formula(paste(paste(aggVars,collapse="+"),"~ variable")),
fun.aggregate=sum,na.rm=T,fill=0)
head(otheraggData)
head(otheraggData2)
class(otheraggData2)
otheraggData <- dcast(melt(dataAllDomains[,c(aggVars,mixVars[mixVars!="daysOfTrapping"])],
id.vars=aggVars),as.formula(paste(paste(aggVars,collapse="+"),"~ variable")),
fun.aggregate=median,na.rm=T,fill=0)
otheraggData$daysOfTrapping <- dcast(melt(dataAllDomains[,c(aggVars,"daysOfTrapping")],
id.vars=aggVars),as.formula(paste(paste(aggVars,collapse="+"),"~ variable")),
fun.aggregate=sum,na.rm=T,fill=0)$daysOfTrapping
head(otheraggData)
mixVars <- unique(c(mixVars,"decimalLatitude","decimalLongitude"))
otheraggData <- dcast(melt(dataAllDomains[,c(aggVars,mixVars[mixVars!="daysOfTrapping"])],
id.vars=aggVars),as.formula(paste(paste(aggVars,collapse="+"),"~ variable")),
fun.aggregate=median,na.rm=T,fill=0)
otheraggData$daysOfTrapping <- dcast(melt(dataAllDomains[,c(aggVars,"daysOfTrapping")],
id.vars=aggVars),as.formula(paste(paste(aggVars,collapse="+"),"~ variable")),
fun.aggregate=sum,na.rm=T,fill=0)$daysOfTrapping
otheraggData$daysOfTrapping[otheraggData$daysOfTrapping==0] = NA
head(otheraggData)
require(shiny)
runGitHub( "ShinyAggreg", "dantaylor60")
setwd("~/Dropbox/Research/Duke2015/NEON/DataManipulation/ShinyAggreg")
ui <- shinyUI(fluidPage(
headerPanel('NEON data aggregation by species'),
sidebarPanel(
selectInput('group','data type',c('smallMammal','carabid','plantPresenceCover')),
selectInput('space.Agg','spatial scale',c('byDomain','bySite','byPlot')),
selectInput('time.Agg','temporal scale',c("aggAll",'byYear','byMonthYear','byBout')),
selectInput('typeFiles','file type for plant presence',c("none",'1m2Data','10m2Data','100m2Data','400m2Data')),
numericInput('numcols', label = "number of columns to display",value=4),
h3("Download data"),
downloadButton('downloadData', 'Download')
),
mainPanel(
tabsetPanel(
tabPanel('preview data',
dataTableOutput("aggData")),
tabPanel('summary',
dataTableOutput("summary"))
)
)
))
source("server.R")
shinyApp(ui = ui, server = serverAgg)
source("server.R")
shinyApp(ui = ui, server = serverAgg)
ui <- shinyUI(fluidPage(
headerPanel('NEON data aggregation by species'),
sidebarPanel(
selectInput('group','data type',c('smallMammal','carabid','plantPresenceCover')),
selectInput('space.Agg','spatial scale',c('byDomain','bySite','byPlot')),
selectInput('time.Agg','temporal scale',c("aggAll",'byYear','byMonthYear','byBout')),
selectInput('typeFiles','file type for plant presence',c("none",'1m2Data','10m2Data','100m2Data','400m2Data')),
numericInput('numcols', label = "number of columns to display",value=4),
h3("Download data"),
downloadButton('downloadData', 'Download')
),
mainPanel(
tabsetPanel(
tabPanel('preview data',
dataTableOutput("aggData")),
tabPanel('summary',
dataTableOutput("summary"))
)
)
))
source("server.R")
shinyApp(ui = ui, server = serverAgg)
source("server.R")
shinyApp(ui = ui, server = serverAgg)
source("server.R")
shinyApp(ui = ui, server = serverAgg)
source("server.R")
shinyApp(ui = ui, server = serverAgg)
source("server.R")
shinyApp(ui = ui, server = serverAgg)
require(shiny)
runGitHub( "ShinyAggreg", "dantaylor60")
setwd("~/Dropbox/Research/Duke2015/NEON/DataManipulation/ShinyAggreg")
ui <- shinyUI(fluidPage(
headerPanel('NEON data aggregation by species'),
sidebarPanel(
selectInput('group','data type',c('smallMammal','carabid','plantPresenceCover')),
selectInput('space.Agg','spatial scale',c('byDomain','bySite','byPlot')),
selectInput('time.Agg','temporal scale',c("aggAll",'byYear','byMonthYear','byBout')),
selectInput('typeFiles','file type for plant presence',c("none",'1m2Data','10m2Data','100m2Data','400m2Data')),
numericInput('numcols', label = "number of columns to display",value=4),
h3("Download data"),
downloadButton('downloadData', 'Download')
),
mainPanel(
tabsetPanel(
tabPanel('preview data',
dataTableOutput("aggData")),
tabPanel('summary',
dataTableOutput("summary"))
)
)
))
source("server.R")
ui <- shinyUI(fluidPage(
headerPanel('NEON data aggregation by species'),
sidebarPanel(
selectInput('group','data type',c('smallMammal','carabid','plantPresenceCover')),
selectInput('space.Agg','spatial scale',c('byDomain','bySite','byPlot')),
selectInput('time.Agg','temporal scale',c("aggAll",'byYear','byMonthYear','byBout')),
selectInput('typeFiles','file type for plant presence',c("none",'1m2Data','10m2Data','100m2Data','400m2Data')),
numericInput('numcols', label = "number of columns to display",value=4),
h3("Download data"),
downloadButton('downloadData', 'Download')
),
mainPanel(
tabsetPanel(
tabPanel('preview data',
dataTableOutput("aggData")),
tabPanel('summary',
dataTableOutput("summary"))
)
)
))
shinyApp(ui = ui, server = serverAgg)
source("server.R")
shinyApp(ui = ui, server = serverAgg)
